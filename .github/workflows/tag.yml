name: CMake

on:
  push:
    tags:
      - 'v*.*.*.*'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Configure
      run: cmake -B build -DPRINT_VERSION=${GITHUB_REF_NAME#v} # Pass tag as version
    - name: Build
      run: cmake --build build
    - name: Create Packages
      run: |
        # Removed: cmake --build build --target package (explicit cpack calls below are clearer)
        cpack --project-directory build -B build/packages -G DEB
        cpack --project-directory build -B build/packages -G RPM
    - name: Upload Linux Packages
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages
        path: |
          build/packages/*.deb
          build/packages/*.rpm

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Configure
      run: cmake -B build -DPRINT_VERSION=${{ env.GITHUB_REF_NAME_NO_V }} # Pass tag as version
      env:
        GITHUB_REF_NAME_NO_V: ${{ github.ref_name }} # Bash syntax won't work directly, use env var
    - name: Build
      run: cmake --build build
    - name: Install WiX
      run: choco install wixtoolset
    - name: Create MSI
      run: cpack --project-directory build -B build/packages -G WIX
    - name: Upload Windows Package
      uses: actions/upload-artifact@v4
      with:
        name: windows-package
        path: build/packages/*.msi
    # Post-process GITHUB_REF_NAME_NO_V in a Powershell step if complex manipulation is needed
    # For simple 'v' removal for Windows, direct string manipulation in run step might be tricky.
    # Simpler approach if CMake handles versioning internally based on Git tag or a file.
    # For now, assuming PRINT_VERSION is handled by CMake or you can pass it like on Linux.
    # Re-evaluating the -DPRINT_VERSION for windows, as direct shell expansion is tricky:
    # Best practice: let CMake determine the version internally if possible or use an action to set env var.
    # For simplicity, let's use the GITHUB_REF_NAME directly and have CMake strip 'v'.
    # Configure step for Windows, revised for version passing:
    # - name: Configure
    #   run: cmake -B build -DPRINT_VERSION=${GITHUB_REF_NAME#v} # This syntax is bash, won't work in pwsh
    # A robust way to pass version:
    - name: Set Version Environment Variable
      run: echo "PACKAGE_VERSION=${{ github.ref_name }}" | sed 's/v//' >> $GITHUB_ENV
    - name: Configure (Windows)
      run: cmake -B build -DPRINT_VERSION=${{ env.PACKAGE_VERSION }}

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - name: Configure
      run: cmake -B build -DPRINT_VERSION=${GITHUB_REF_NAME#v} # Pass tag as version
    - name: Build
      run: cmake --build build
    - name: Create DMG
      run: cpack --project-directory build -B build/packages -G DragNDrop
    - name: Upload macOS Package
      uses: actions/upload-artifact@v4
      with:
        name: macos-package
        path: build/packages/*.dmg

  create-release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4 # No 'name' needed, downloads all. It will create subdirectories.
      with:
        path: artifacts # All artifacts will be in artifacts/linux-packages, artifacts/windows-package etc.
    - name: Create Release
      uses: ncipollo/release-action@v1 # Consider updating to a newer version if available/needed
      with:
        artifacts: "artifacts/**/*" # This glob will find all packages in their subdirectories
        token: ${{ secrets.GITHUB_TOKEN }}
        # Optional: specify tag name if it's not automatically picked up from GITHUB_REF_NAME
        # tagName: ${{ github.ref_name }}
        # Optional: make it a draft release first
        # draft: true
        # Optional: auto-generate release notes
        # generateReleaseNotes: true
